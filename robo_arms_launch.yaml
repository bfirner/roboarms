launch:

# Include the xarm launch files for arm1 and arm2
- include:
    file: "$(find-pkg-share interbotix_xsarm_control)/launch/xsarm_control.launch.py"
    arg:
    -
      name: "robot_model"
      value: "px150"
    -
      name: "mode_configs"
      value: "configs/modes_1.yaml"
    -
      name: "motor_configs"
      value: "configs/px150_motor.yaml"
    -
      name: "robot_name"
      value: "arm1"
    -
      name: "use_gripper"
      value: "true"
    -
      name: "load_configs"
      value: "false"
    -
      name: "use_rviz"
      value: "false"

- include:
    file: "$(find-pkg-share interbotix_xsarm_control)/launch/xsarm_control.launch.py"
    arg:
    -
      name: "robot_model"
      value: "px150"
    -
      name: "mode_configs"
      value: "configs/modes_2.yaml"
    -
      name: "motor_configs"
      value: "configs/px150_motor.yaml"
    -
      name: "robot_name"
      value: "arm2"
    -
      name: "use_gripper"
      value: "true"
    -
      name: "load_configs"
      value: "false"
    -
      name: "use_rviz"
      value: "false"

- node:
    pkg: "v4l2_camera"
    exec: "v4l2_camera_node"
    name: "camera"
    param:
    -
      name: "params-file"
      value: "cam_params.yaml"
    -
      name: "video_device"
      value: "/dev/video2"
    -
      name: "pixel_format"
      value: "YUYV"
    -
      name: "output_encoding"
      value: "rgb8"
    -
      name: "image_size"
      value: [1280, 720]

- node:
    pkg: "rqt_image_view"
    exec: "rqt_image_view"
    name: "camera_view"


#- node:
#  pkg: "robo_arms"
#  exec: "manipulator"
#  name: "manipulator"
#
#- node:
#  pkg: "robo_arms"
#  exec: "arm_puppet"
#  name: "arm_puppet"

# Example from https://docs.ros.org/en/foxy/How-To-Guides/Launch-file-different-formats.html
# Example from https://docs.ros.org/en/humble/How-To-Guides/Launch-file-different-formats.html
## args that can be set from the command line or a default will be used
#- arg:
#    name: "background_r"
#    default: "0"
#- arg:
#    name: "background_g"
#    default: "255"
#- arg:
#    name: "background_b"
#    default: "0"
#- arg:
#    name: "chatter_ns"
#    default: "my/chatter/ns"
#
#
## include another launch file
#- include:
#    file: "$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener.launch.py"
#
## include another launch file in the chatter_ns namespace
#- group:
#    - push-ros-namespace:
#        namespace: "$(var chatter_ns)"
#    - include:
#        file: "$(find-pkg-share demo_nodes_cpp)/launch/topics/talker_listener.launch.py"
#
## start a turtlesim_node in the turtlesim1 namespace
#- node:
#    pkg: "turtlesim"
#    exec: "turtlesim_node"
#    name: "sim"
#    namespace: "turtlesim1"
#
## start another turtlesim_node in the turtlesim2 namespace and use args to set parameters
#- node:
#    pkg: "turtlesim"
#    exec: "turtlesim_node"
#    name: "sim"
#    namespace: "turtlesim2"
#    param:
#    -
#      name: "background_r"
#      value: "$(var background_r)"
#    -
#      name: "background_g"
#      value: "$(var background_g)"
#    -
#      name: "background_b"
#      value: "$(var background_b)"
#
## perform remap so both turtles listen to the same command topic
#- node:
#    pkg: "turtlesim"
#    exec: "mimic"
#    name: "mimic"
#    remap:
#    -
#        from: "/input/pose"
#        to: "/turtlesim1/turtle1/pose"
#    -
#        from: "/output/cmd_vel"
#        to: "/turtlesim2/turtle1/cmd_vel"
